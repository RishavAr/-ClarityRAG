# -*- coding: utf-8 -*-
"""rag_api.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rup8oNpBqVZmntmW2EM1nNfJOnzCPA18
"""

"""
abh.py – FastAPI wrapper that exposes your get_answer() function
in an OpenAI-compatible format for Open WebUI.

Endpoints
─────────
POST /v1/chat/completions          – single JSON reply  (Stream toggle OFF)
POST /v1/chat/completions-stream   – SSE streaming      (Stream toggle ON)
GET  /v1/models                    – returns model id   (“clarity-rag”)
GET  /v1/api/{tags,ps,version}     – quiet health checks
"""

import uuid, json, asyncio
from fastapi import FastAPI
from fastapi.responses import JSONResponse, StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from fi import get_answer          # ← make sure fi.py is in the same folder

app = FastAPI(title="Clarity RAG API")

# ─── Allow WebUI (running in the browser) to hit localhost:8000 ──────────────
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],            # or restrict to ["http://localhost:3000"]
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ─── Pydantic request/response schema (OpenAI style, minimal) ────────────────
class Message(BaseModel):
    role: str
    content: str

class ChatRequest(BaseModel):
    model: str | None = Field(default=None)
    stream: bool | None = Field(default=False)   # WebUI sets this when toggle ON
    messages: list[Message]

class Choice(BaseModel):
    message: Message

class ChatResponse(BaseModel):
    choices: list[Choice]

# ─── 1. Non-stream endpoint (/chat/completions) ──────────────────────────────
@app.post("/v1/chat/completions", response_model=ChatResponse)
def chat(req: ChatRequest):
    question = req.messages[-1].content
    answer   = get_answer(question)
    return ChatResponse(
        choices=[Choice(message=Message(role="assistant", content=answer))]
    )

# ─── 2. Stream endpoint (/chat/completions-stream) ───────────────────────────
@app.post("/v1/chat/completions-stream")
async def chat_stream(req: ChatRequest):
    question = req.messages[-1].content
    answer   = get_answer(question)

    async def event_stream():
        chat_id = "chatcmpl-" + uuid.uuid4().hex

        # First chunk – assistant role
        yield "data: " + json.dumps({
            "id": chat_id,
            "object": "chat.completion.chunk",
            "choices": [{
                "index": 0,
                "delta": {"role": "assistant"},
                "finish_reason": None
            }]
        }) + "\n\n"

        # Content chunks – 20-word groups for efficiency
        words = answer.split()
        step  = 20
        for i in range(0, len(words), step):
            chunk_text = " ".join(words[i:i+step]) + " "
            yield "data: " + json.dumps({
                "id": chat_id,
                "object": "chat.completion.chunk",
                "choices": [{
                    "index": 0,
                    "delta": {"content": chunk_text},
                    "finish_reason": None
                }]
            }) + "\n\n"
            await asyncio.sleep(0)          # yield control but no delay

        # Final chunk
        yield "data: " + json.dumps({
            "id": chat_id,
            "object": "chat.completion.chunk",
            "choices": [{
                "index": 0,
                "delta": {},
                "finish_reason": "stop"
            }]
        }) + "\n\ndata: [DONE]\n\n"

    return StreamingResponse(event_stream(),
                             media_type="text/event-stream")

# ─── 3. Model list (needed so WebUI shows “clarity-rag” in dropdown) ─────────
@app.get("/v1/models")
def list_models():
    return {"data": [{"id": "clarity-rag", "object": "model"}]}

# ─── 4. Stubs for WebUI health-check polling ─────────────────────────────────
@app.get("/v1/api/tags")
async def tags_stub():     return {"data": []}

@app.get("/v1/api/ps")
async def ps_stub():       return {"data": []}

@app.get("/v1/api/version")
async def version_stub():  return {"version": "clarity-rag 0.1"}